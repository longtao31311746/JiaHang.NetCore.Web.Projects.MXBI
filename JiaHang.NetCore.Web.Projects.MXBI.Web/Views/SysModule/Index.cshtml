
@{
    ViewData["Title"] = "Index";
}

<style>
    .layui-layer-shade { display: none; }

    /*.layui-select-title input { width: 180px; }*/
</style>
<div>

    <span class="layui-breadcrumb">
        <a href="/">首页</a>
        <a href="#">模块编辑</a>
        <a><cite>模块管理</cite></a>
    </span>
    <div class="layui-form" style="background-color:#F2F2F2;padding:30px 20px;margin-top:20px;">
        <div class="layui-form-item">
            模块名称：
            <div class="layui-inline">
                <input class="layui-input" name="id" id="search_module_name" autocomplete="off">
            </div>
           
            模块级别：
            <div class="layui-inline">
                <select name="interest" id="search_module_level" lay-filter="aihao">
                    <option value=""></option>
                    <option value="1">一级模块</option>
                    <option value="2">二级模块</option>
                    <option value="3">三级模块</option>
                </select>
            </div>

        </div>
        <div class="layui-form-item" style="margin-top:30px;">
            <button class="layui-btn btn-search" data-type="search">条件查询</button>
            <button class="layui-btn" data-type="showGenerateLayer">新增模块</button>
            @*<button class="layui-btn" data-type="getCheckData">选中行删除</button>*@
        </div>

    </div>
    <table class="layui-hide" id="test" lay-filter="sysuser"> </table>

</div>
<div id="generate_layer" style="display:none; padding:40px;">
    <div class="layui-form layui-form-pane" action="" lay-filter="generate-form">

        <div class="layui-form-item">

            <label class="layui-form-label">模块名称</label>
            <div class="layui-input-block">
                <input type="text" name="modulename" id="modulename" autocomplete="off" placeholder="模块名称" class="layui-input" lay-verify="required">
            </div>


        </div>

        <div class="layui-form-item">
            <label class="layui-form-label">模块等级</label>
            <div class="layui-input-inline">
                <input type="text" id="module_level" lay-verify="required" placeholder="模块等级" autocomplete="off" class="layui-input" readonly value="一级模块">
            </div>
            <div class="layui-form-mid layui-word-aux">当前模块级别,若无父级模块，可不选择</div>
        </div>
        <div class="layui-form-item">
            <label class="layui-form-label">一级模块</label>
            <div class="layui-input-block">
                <select id="first_module" lay-filter="first-module">
                    <option value="">若无所属模块可不必选择</option>
                </select>
            </div>
        </div>

        <div class="layui-form-item">
            <label class="layui-form-label">二级模块</label>
            <div class="layui-input-block">
                <select id="second_module"  lay-filter="second-module">
                    <option value="">不选择</option>                   
                </select>
            </div>
        </div>




        <div class="layui-form-item">
            <button class="layui-btn" data-type="generate" id="generate_btn" lay-submit lay-filter="submit">立即创建</button>
            <button class="layui-btn layui-layer-btn1" lay-filter="demo2" data-type="closeGenerateLayer">取消</button>
        </div>
    </div>


</div>
<script type="text/html" id="barDemo">
    <a class="layui-btn layui-btn-xs" lay-event="edit">编辑</a>
    <a class="layui-btn layui-btn-danger layui-btn-xs" lay-event="del">删除</a>
</script>
<script>
    var modules = [];
    layui.use(['table', 'element', 'layer', 'form', 'laydate'], function () {
        var table = layui.table;
        var element = layui.element;
        var layer = layui.layer;
        var form = layui.form;
        var laydate = layui.laydate;
        var generateLayer_index = 0;
        var layType = true;//true 新增  false 编辑
        var moduleId = "";
       

        var module_level = "";



        //日期
        laydate.render({
            elem: '#eff_start_date'
        });
        laydate.render({
            elem: '#eff_end_date'
        });


        table.render({
            elem: '#test'
            , url: '/api/sysmoduledata/search/'
            , contentType: 'application/json'
            , method: 'post'
            , parseData: function (res) { //res 即为原始返回的数据
                return {
                    "status": res.isSuccess,
                    "code": res.isSuccess == true ? 0 : 1, //解析接口状态
                    "msg": res.message, //解析提示文本
                    "count": res.content.total, //解析数据长度
                    "data": res.content.data //解析数据列表
                };
            }

            , cols: [[
                // { type: 'checkbox', fixed: 'left' }
                 { field: 'moduleName', title: '模块名称' }
                , { field: 'moduleLevel', title: '当前模块级别', sort: true }               
                , { field: 'firstModuleName', title: '所属一级模块', sort: true }
                , { field: 'secondModuleName', title: '所属二级模块', }
                , { field: 'creation_Date', title: '创建时间', sort: true }
                , { fixed: 'right', align: 'center', toolbar: '#barDemo', fixed: 'right' } //这里的toolbar值是模板元素的选择器
            ]]
            , id: 'testReload'
            //, page: true
            ,text: {
                none: '暂无相关数据' //默认：无数据。注：该属性为 layui 2.2.5 开始新增
            }
        });


        table.on('checkbox(sysuser)', function (obj) {
           
        });
        //监听工具条
        table.on('tool(sysuser)', function (obj) {
            var data = obj.data;
            if (obj.event === 'detail') {
                layer.msg('ID：' + data.id + ' 的查看操作');
            } else if (obj.event === 'del') {
             
                let confirm_title = "确认删除[" + data.moduleName + "]系统模块的记录么?";
                if (data.moduleLevel!="三级模块")
                    confirm_title += "<Br/>" +"&nbsp;&nbsp;该模块下的所有模块也将被删除!"
                layer.confirm(confirm_title, function (index) {
                    layer.close(index);
                    axios.delete('/api/sysmoduledata/' + data.moduleId)
                        .then(function (response) {
                            
                            layer.msg(response.data.message);
                            if (!response.data.isSuccess) {
                                return;
                            }
                            //obj.del();
                            window.location.reload();
                        })
                        .catch(function (error) {
                            console.log(error);
                        });

                });
            } else if (obj.event === 'edit') {                
                moduleId = data.moduleId
                layType = false;
                showLayer(data);
            }
        });

        var $ = layui.$, active = {
            getCheckData: function () { //获取选中数据
                var checkStatus = table.checkStatus('testReload')
                    , data = checkStatus.data;


                layer.confirm("确认删除" + data.length + "条记录么", function (index) {
                    layer.close(index);

                    let ids = [];
                    let parms = "?";
                    for (let i = 0; i < data.length; i++) {
                        ids.push(data[i].moduleId);
                        parms += "ids=" + data[i].moduleId + "&";
                    }
                    parms = parms.substring(0, parms.length - 1);
                    //layer.alert(JSON.stringify(data));
                    axios.delete("/api/sysmodule/batchdelete/" + parms)
                        .then(function (response) {
                            
                            layer.msg(response.data.message);
                            if (!response.data.isSuccess) {
                                return;
                            }

                            //移除
                            let tabledata = table.cache.testReload;
                            
                            tableReload(tabledata);


                        })
                        .catch(function (error) {
                            layer.msg("发生了预料之外的错误!");
                            console.log(error);
                        });
                });


            },
            search: function () {
               
                let pars = {
                    limit: 10,
                    page: 1,
                    ModuleLevel: Number( $("#search_module_level").val()),
                    ModuleName: $("#search_module_name").val(),   
                }
                //if ($("#search_user_ower").val() != "") {
                //    pars.User_Ower = Number($("#search_user_ower").val());
                //}
                //if ($("#search_user_is_ldap").val() != "") {
                //    pars.User_Is_Ldap = $("#search_user_is_ldap").val() == "1";
                //}
                //执行重载
                
                table.reload('testReload', {
                    where: pars,
                    contentType: 'application/json',
                    method: 'post'
                });
            },
            showGenerateLayer: function () {
                
                layType = true;
                showLayer();
            },
            closeGenerateLayer: function () {
                layer.close(generateLayer_index);
            },

        };
        form.on('submit(submit)', function () {
            //获取父级id
            var parentid = $("#first_module").val();
           
            if (parentid != "") {
                var secondid = $("#second_module").val();
                if (secondid != "") {
                    parentid = secondid;
                }
            }

          
            let model = {
                modulename: $("#modulename").val(),
                parentid: parentid
            };

           
            let url = "/api/sysmoduledata";
            let method = "POST";
            if (layType != true) {
                url = "/api/sysmoduledata/" + moduleId;
                method = "PUT";
            }
            axios({ url: url, method: method, data: model })
                .then(function (response) {
                    
                    layer.msg(response.data.message);
                    if (!response.data.isSuccess) {
                        return;
                    }
                    let datatable = table.cache.testReload;
                 
                    if (layType != true) {
                        //修改
                        for (let i = 0; i < datatable.length; i++) {
                            if (datatable[i].moduleId == response.data.content.moduleId) {
                                datatable.splice(i, 1, response.data.content);
                                break;
                            }
                        }
                    }
                    else {
                        //新增
                        datatable.unshift(response.content)

                    }
                   // tableReload(datatable)
                    window.location.reload();
                    layer.close(generateLayer_index);
                })
                .catch(function (error) {

                    layer.msg("发生了预料之外的错误!");
                    console.log(error);
                });

            return false; //阻止表单跳转。如果需要表单跳转，去掉这段即可。
        })
        form.on('select(first-module)', function (data) {
           
            initSecondSelect(data.value,"");
            if (data.value == "") {
                $("#second_module").attr("disabled", "disabled");
                $("#module_level").val( "一级模块");
                return;
            }
            //$("#module_level").attr('disabled', true);
            $("#module_level").val("二级模块");
            $("#second_module").removeAttr("disabled");
           
        })

        form.on('select(second-module)', function (data) {
            if (data.value == "") {
                $("#module_level").val("二级模块");
                return;
            }
            $("#module_level").val("三级模块");
        })

            $('.layui-btn').on('click', function () {
                var type = $(this).data('type');
                active[type] ? active[type].call(this) : '';
            });

        init();
        function init() {
            getModules();

        }

        function getModules() {
         
            axios.get('/api/sysmoduledata/acquisitionmodule')
                .then(function (response) {
                   
                    modules = response.data;
               
                    if (response.data.length == 0) return;
                    //for (let i = 0;i<res)
                    //$('#first_module').append(new Option(res.xm, item.id));
                    initFirstSelect("");
                })
                .catch(function (error) {
                    console.log(error);
                });

        };

        function initFirstSelect(id) {
            console.log("init_select:"+id);
            $("#first_module").html("");
            $('#first_module').append(new Option("不选择", ""));
            if (modules.length == 0) {               
                form.render('select');
                return;
            }
            console.log(modules);;
            for (let i = 0; i < modules.length; i++) {
                console.log(modules[i].moduleName);
                $('#first_module').append(new Option(modules[i].moduleName, modules[i].id));
            }
            if (id != null && id != "") { 

                $("select[name='result']").val(11);
                var select = 'dd[lay-value=' + id + ']';
                $('#first_module').siblings("div.layui-form-select").find('dl').find(select).click();
            }
           
            //form.render('select', 'first-module');
            form.render('select');
        }
        function initSecondSelect(id, secondid) {
            console.log("init_second_select:" + secondid);
            let childs_module = [];
            for (let i = 0; i < modules.length; i++) {
                if (modules[i].id == id) {
                    childs_module = modules[i].listChilds;
                    break;
                }
            }
           
            $("#second_module").html("");
            $('#second_module').append(new Option("不选择", ""));
            if (childs_module.length == 0) { 
                form.render('select');
                return;
            }
            
            $('#second_module').append(new Option("", ""));
            for (let j = 0; j < childs_module.length; j++) {
                $('#second_module').append(new Option(childs_module[j].moduleName, childs_module[j].id));
            }
          
            if (secondid != null && secondid != "") { 
                var select = 'dd[lay-value=' + secondid + ']';
                console.log(select);
                $('#second_module').siblings("div.layui-form-select").find('dl').find(select).click();
            }
            //form.render('select', 'second-module');
            form.render('select');
        }
       

        function showLayer(data) {

             
                initFormValue(data);
                let title = "新增系统模块";
                //document.getElementById("user_account").disabled = false;
                document.getElementById("generate_btn").innerHTML = "立即创建";
                if (layType != true) {
                    title = "编辑系统模块";
                    //document.getElementById("user_account").disabled = true;
                    document.getElementById("generate_btn").innerHTML = "立即修改";
                }
                generateLayer_index = layer.open({
                    type: 1
                    , title: title //不显示标题栏
                    , closeBtn: false
                    , area: ['1100px', '600px']
                    , shade: 0.8
                    , id: 'LAY_layuipro' //设定一个id，防止重复弹出
                    //, btn: ['火速围观', '残忍拒绝']
                    , btnAlign: 'c'
                    , moveType: 1 //拖拽模式，0或者1
                    , content: $('#generate_layer') //这里content是一个DOM，注意：最好该元素要存放在body最外层，否则可能被其它的相对元素所影响

                });
            };
        function initFormValue(data) {
            $("#first_module").removeAttr("disabled");
            $("#second_module").removeAttr("disabled"); 
            if (data == undefined) {

                form.val("generate-form", {
                    modulename:"",
                    firstModuleId: "",
                    secondModuleId: ""
                })
                return;
            }
            
            form.val("generate-form", {
                modulename: data.moduleName,
                firstModuleId: data.firstModuleId,
                secondModuleId: data.secondModuleId
            });
          
            $("#module_level").val(data.moduleLevel);
            
            
            form.render('select');
            initFirstSelect(data.firstModuleId);
            initSecondSelect(data.firstModuleId, data.secondModuleId);
            if (data.moduleLevel == "一级模块") {
                $("#first_module").attr("disabled", "disabled");
                $("#second_module").attr("disabled", "disabled");
            }
            if (data.moduleLevel == "二级模块") {
                $("#second_module").attr("disabled", "disabled");
            }
            form.render('select');
            
        }
        function tableReload(datatable) {
           
            table.reload("testReload", {
                data: datatable
            })
        }

    });



</script>

